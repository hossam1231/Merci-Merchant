/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */
import { NativeModules, Image } from 'react-native';
const {
  resolveAssetSource
} = Image;
const {
  PyTorchCoreMobileModelModule: MobileModelModule
} = NativeModules;
/**
 * Cache for previously resolved model paths (i.e., asset sources).
 */

const MODEL_PATH_CACHE = {};
/**
 * Resolves the model asset source. It will first try to find the asset source
 * in the cache if it was previously resolved, otherwise it will use the
 * `resolveAssetSource` provided by the React Native [[Image]].
 *
 * @param modelPath The model path (i.e., a `require`).
 */

function getModelAssetSource(modelPath) {
  let source = MODEL_PATH_CACHE[modelPath];

  if (source == null) {
    source = resolveAssetSource(modelPath);
    MODEL_PATH_CACHE[modelPath] = source;
  }

  return source;
}
/**
 * Checks if the passed in model path is a string or a resolvable asset source.
 * In case the path is a string it will be used as a URI. If it is a resolvable
 * asset source, it will resolve the asset source and get its URI.
 *
 * @param modelPath The model path as require or uri (i.e., `require`).
 * @returns A URI to resolve the model.
 */


function getModelUri(modelPath) {
  if (typeof modelPath === 'string') {
    return modelPath;
  } else {
    const source = getModelAssetSource(modelPath);
    return source.uri;
  }
}

export const MobileModel = {
  async preload(modelPath) {
    const uri = getModelUri(modelPath);
    return await MobileModelModule.preload(uri);
  },

  async unload() {
    return await MobileModelModule.unload();
  },

  async execute(modelPath, params) {
    const uri = getModelUri(modelPath);
    return await MobileModelModule.execute(uri, params);
  }

};
//# sourceMappingURL=MobileModelModule.js.map