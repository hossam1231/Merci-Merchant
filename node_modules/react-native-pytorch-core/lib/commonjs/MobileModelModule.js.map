{"version":3,"sources":["MobileModelModule.ts"],"names":["resolveAssetSource","Image","PyTorchCoreMobileModelModule","MobileModelModule","NativeModules","MODEL_PATH_CACHE","getModelAssetSource","modelPath","source","getModelUri","uri","MobileModel","preload","unload","execute","params"],"mappings":";;;;;;;AASA;;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA,MAAM;AAACA,EAAAA;AAAD,IAAuBC,kBAA7B;AAEA,MAAM;AAACC,EAAAA,4BAA4B,EAAEC;AAA/B,IAAoDC,0BAA1D;AAEA;AACA;AACA;;AACA,MAAMC,gBAA2D,GAAG,EAApE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CACEC,SADF,EAE4B;AAC1B,MAAIC,MAAM,GAAGH,gBAAgB,CAACE,SAAD,CAA7B;;AACA,MAAIC,MAAM,IAAI,IAAd,EAAoB;AAClBA,IAAAA,MAAM,GAAGR,kBAAkB,CAACO,SAAD,CAA3B;AACAF,IAAAA,gBAAgB,CAACE,SAAD,CAAhB,GAA8BC,MAA9B;AACD;;AACD,SAAOA,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBF,SAArB,EAAmD;AACjD,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOA,SAAP;AACD,GAFD,MAEO;AACL,UAAMC,MAAM,GAAGF,mBAAmB,CAACC,SAAD,CAAlC;AACA,WAAOC,MAAM,CAACE,GAAd;AACD;AACF;;AA4FM,MAAMC,WAAwB,GAAG;AACtC,QAAMC,OAAN,CAAcL,SAAd,EAAmD;AACjD,UAAMG,GAAG,GAAGD,WAAW,CAACF,SAAD,CAAvB;AACA,WAAO,MAAMJ,iBAAiB,CAACS,OAAlB,CAA0BF,GAA1B,CAAb;AACD,GAJqC;;AAKtC,QAAMG,MAAN,GAA8B;AAC5B,WAAO,MAAMV,iBAAiB,CAACU,MAAlB,EAAb;AACD,GAPqC;;AAQtC,QAAMC,OAAN,CAAiBP,SAAjB,EAAuCQ,MAAvC,EAA6E;AAC3E,UAAML,GAAG,GAAGD,WAAW,CAACF,SAAD,CAAvB;AACA,WAAO,MAAMJ,iBAAiB,CAACW,OAAlB,CAA0BJ,GAA1B,EAA+BK,MAA/B,CAAb;AACD;;AAXqC,CAAjC","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {\n  NativeModules,\n  Image,\n  ImageResolvedAssetSource,\n  ImageRequireSource,\n} from 'react-native';\nimport type {ModelPath} from './Models';\n\nconst {resolveAssetSource} = Image;\n\nconst {PyTorchCoreMobileModelModule: MobileModelModule} = NativeModules;\n\n/**\n * Cache for previously resolved model paths (i.e., asset sources).\n */\nconst MODEL_PATH_CACHE: {[key: string]: ImageResolvedAssetSource} = {};\n\n/**\n * Resolves the model asset source. It will first try to find the asset source\n * in the cache if it was previously resolved, otherwise it will use the\n * `resolveAssetSource` provided by the React Native [[Image]].\n *\n * @param modelPath The model path (i.e., a `require`).\n */\nfunction getModelAssetSource(\n  modelPath: ImageRequireSource,\n): ImageResolvedAssetSource {\n  let source = MODEL_PATH_CACHE[modelPath];\n  if (source == null) {\n    source = resolveAssetSource(modelPath);\n    MODEL_PATH_CACHE[modelPath] = source;\n  }\n  return source;\n}\n\n/**\n * Checks if the passed in model path is a string or a resolvable asset source.\n * In case the path is a string it will be used as a URI. If it is a resolvable\n * asset source, it will resolve the asset source and get its URI.\n *\n * @param modelPath The model path as require or uri (i.e., `require`).\n * @returns A URI to resolve the model.\n */\nfunction getModelUri(modelPath: ModelPath): string {\n  if (typeof modelPath === 'string') {\n    return modelPath;\n  } else {\n    const source = getModelAssetSource(modelPath);\n    return source.uri;\n  }\n}\n\nexport interface ModelResultMetrics {\n  /**\n   * The pack time, model inference time, and unpack time in milliseconds.\n   */\n  totalTime: number;\n  /**\n   * The model inference time in milliseconds.\n   */\n  inferenceTime: number;\n  /**\n   * The pack time in milliseconds.\n   */\n  packTime: number;\n  /**\n   * The unpack time in milliseconds.\n   */\n  unpackTime: number;\n}\n\n/**\n * Result of model inference. Each model result has the inference time and the\n * model result. The model result depends on the model and is therefore\n * specified as a generic type (i.e., template).\n *\n * @template T Model result type\n */\nexport interface ModelResult<T> {\n  /**\n   * The model result.\n   */\n  result: T;\n\n  /**\n   * The model result metrics, e.g., including inference time in milliseconds.\n   */\n  metrics: ModelResultMetrics;\n}\n\n/**\n * @packageDocumentation\n *\n * The `MobileModel` is the core module providing functions to run model\n * inference and preload models.\n */\nexport interface MobileModel {\n  /**\n   * Preload a model. If a model is not preloaded, it will be loaded during the\n   * first inference call. However, the first inference time will therefore\n   * take significantly longer. This function allows to preload a model ahead\n   * of time before running the first inference.\n   *\n   * @param modelPath The model path as require or uri (i.e., `require`).\n   */\n  preload(modelPath: ModelPath): Promise<void>;\n\n  /**\n   * Unload all model. If any model were loaded previously, they will be discarded.\n   * This function allows to load a new version of a model without restarting the\n   * app.\n   */\n  unload(): Promise<void>;\n\n  /**\n   * Run inference on a model.\n   *\n   * ```typescript\n   * const classificationModel = require('../models/mobilenet_v3_small.ptl');\n   *\n   * // or\n   *\n   * const classificationModel = require('https://example.com/models/mobilenet_v3_small.ptl');\n   *\n   * const image: Image = await ImageUtils.fromURL('https://image.url');\n   *\n   * const { result: {maxIdx} } = await MobileModel.execute(\n   *   classificationModel,\n   *   {\n   *     image,\n   *   }\n   * );\n   *\n   * const topClass = ImageClasses(scores);\n   * ```\n   *\n   * @param modelPath The model path as require or uri (i.e., `require`).\n   * @param params The input parameters for the model.\n   */\n  execute<T>(modelPath: ModelPath, params: any): Promise<ModelResult<T>>;\n}\n\nexport const MobileModel: MobileModel = {\n  async preload(modelPath: ModelPath): Promise<void> {\n    const uri = getModelUri(modelPath);\n    return await MobileModelModule.preload(uri);\n  },\n  async unload(): Promise<void> {\n    return await MobileModelModule.unload();\n  },\n  async execute<T>(modelPath: ModelPath, params: any): Promise<ModelResult<T>> {\n    const uri = getModelUri(modelPath);\n    return await MobileModelModule.execute(uri, params);\n  },\n};\n"]}